// import { NormalizedCacheObject, InMemoryCache } from 'apollo-cache-inmemory';
// import { ApolloClient } from 'apollo-client';
// import { ApolloInitialState } from './ApolloInitialState';
// import { ApolloLink } from 'apollo-link';
// import { BatchHttpLink } from 'apollo-link-batch-http';
// import { createUploadLink } from 'apollo-upload-client';
// import { IncomingMessage } from 'http';
// import {
//   uploadLinkXhr,
//   UploadRequestInit,
// } from './package/apollo/uploadLinkXhr';
// import get from 'lodash/get';
// import isomorphicFetch from 'isomorphic-unfetch';

// // Polyfill fetch() on the server (used by apollo-client)
// if (!process.browser) {
//   global.fetch = isomorphicFetch;
// }

// // TODO brát z ENV nebo předávat při volání initApollo
// const ApolloLinkUri = '/api';

// let apolloClient: ApolloClient<NormalizedCacheObject> | null = null;
// export type NextFrontendRequest = IncomingMessage & {
//   csrfToken?: () => string;
// };

// const create = (
//   initialState: ApolloInitialState,
//   req?: NextFrontendRequest,
// ) => {
//   // We want to get fresh csrf token for each request, csrf based on cookie secret
//   // csrf token is provided by _app.js
//   const getRequestOptions = <T extends RequestInit>(options: T): T => {
//     let csrfToken = '';
//     if (process.browser) {
//       // @ts-ignore
//       ({ csrfToken } = window.__NEXT_DATA__.props);
//     } else {
//       csrfToken = req && req.csrfToken ? req.csrfToken() : '';
//     }
//     return {
//       ...options,
//       headers: {
//         ...(options && options.headers ? options.headers : {}),
//         'x-csrf-token': csrfToken,
//         accept: 'application/json',
//       },
//     };
//   };
//   const commonOpts = {
//     uri: ApolloLinkUri,
//     credentials: 'same-origin',
//     headers: get(req, 'headers', {}),
//   };
//   const batchOpts = {
//     ...commonOpts,
//     batchMax: 20,
//     fetch: (uri: string, options: RequestInit) => {
//       const fetchOptions: RequestInit = getRequestOptions(options);
//       return isomorphicFetch(uri, fetchOptions);
//     },
//   };
//   const uploadOpts = {
//     ...commonOpts,
//     fetch: (uri: string, options: UploadRequestInit) => {
//       const fetchOptions: UploadRequestInit = getRequestOptions(options);
//       return uploadLinkXhr(uri, fetchOptions);
//     },
//   };
//   const httpLink = ApolloLink.split(
//     (operation: any) => operation.getContext().hasUpload,
//     createUploadLink(uploadOpts),
//     new BatchHttpLink(batchOpts),
//   );
//   return new ApolloClient({
//     connectToDevTools: process.browser,
//     ssrMode: !process.browser, // Disables forceFetch on the server (so queries are only run once)
//     link: httpLink,
//     cache: new InMemoryCache().restore(initialState || {}),
//   });
// };

// const getApolloClient = (
//   initialState: ApolloInitialState,
//   req?: NextFrontendRequest,
// ): ApolloClient<NormalizedCacheObject> => {
//   // Make sure to create a new client for every server-side request so that data
//   // isn't shared between connections (which would be bad)
//   if (!process.browser) {
//     return create(initialState, req);
//   }

//   // Reuse client on the client-side
//   if (!apolloClient) {
//     apolloClient = create(initialState, req);
//   }

//   return apolloClient;
// };

// export { getApolloClient };
